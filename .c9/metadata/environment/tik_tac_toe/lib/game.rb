{"changed":true,"filter":false,"title":"game.rb","tooltip":"/tik_tac_toe/lib/game.rb","value":"class Game\n    attr_accessor :board, :player_one, :player_two\n    \n    # need to add turn taking functionality, takes player as arg\n    # add a function that places symbol in correct square\n    # get row and column as inputs from user\n    # need to add a :won function to determine if game is over\n    # check across won, down won, or diagonal won\n    # I think won would be a while loop that would break on a win, and print a message, asking for another game or quit\n    \n    def initialize(board, player_one, player_two)\n        @board = board\n        @player_one = player_one\n        @player_two = player_two\n        @current_player = @player_one\n    end \n    \n    def make_a_move\n        puts \"The current symbol playing is: #{@current_player.symbol}\"\n        puts \"Enter the row: \"\n        row = gets.chomp.to_i - 1\n        puts \"Enter the column: \"\n        column = gets.chomp.to_i - 1\n        puts \"You entered row #{row} and column #{column}\"\n        @board.board[row][column] = @current_player.symbol\n        @board.print_board\n        #switch players at the end of a turn\n        # dont switch if game is won\n        if game_won\n            puts \"#{@current_player.symbol} Won!\"\n        else\n            @current_player == @player_one ? @current_player = @player_two : @current_player = @player_one\n        end\n    end \n    \n    def start_game\n        while(!game_won) do\n            make_a_move    \n        end \n    end \n    \n    def game_won\n        if check_across(@board, @current_player)\n            return true\n        end \n        if check_down(@board, @current_player)\n            return true\n        end \n        return false\n    end \n        \n    \n    def print_board\n        @board.print_board\n    end \n    \n    private\n    \n    # check to see if any acrossed win \n    def check_across(board, player)\n        @board.board.count.times do |i|\n            if @board.board[i].all? { |el| el == player.symbol }\n                return true\n            end \n        end \n        return false\n    end \n    \n    def check_down(board, player)\n        pos = 0\n        @board.board.count.times do |i|\n            \n            @board.board[i].count.times do |j|\n                # check each in the column, if it doesn't match, return false\n                if @board.board[j][pos] != player.symbol\n                    return false\n                end\n            end \n            # all matched, so return true\n            return true\n            pos += 1\n        end\n        return false\n    end \n        \nend\n        ","undoManager":{"mark":3,"position":4,"stack":[[{"start":{"row":73,"column":31},"end":{"row":73,"column":32},"action":"remove","lines":["i"],"id":2}],[{"start":{"row":73,"column":31},"end":{"row":73,"column":32},"action":"insert","lines":["j"],"id":3}],[{"start":{"row":75,"column":32},"end":{"row":75,"column":33},"action":"remove","lines":["i"],"id":4}],[{"start":{"row":75,"column":32},"end":{"row":75,"column":33},"action":"insert","lines":["j"],"id":5}],[{"start":{"row":73,"column":0},"end":{"row":74,"column":0},"action":"remove","lines":["                p @board.board[j][pos]",""],"id":6}]]},"ace":{"folds":[],"scrolltop":260,"scrollleft":0,"selection":{"start":{"row":73,"column":0},"end":{"row":73,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1724695114279}